<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016 MegaFon
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
        <groupId>com.github.megafonweblab.histone</groupId>
        <artifactId>parent-histone-java-v2</artifactId>
        <version>1.3.5</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>histone-java-v2</artifactId>
    <packaging>jar</packaging>
    <name>Histone Core Module</name>
    <description>Implementation of histone engine</description>
    <url>https://github.com/MegafonWebLab/histone-java2/</url>
    <properties>
        <!--   <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

           &lt;!&ndash; deps versions &ndash;&gt;
           <jackson.version>2.4.4</jackson.version>
           <apache.httpcomponents.version>4.3.6</apache.httpcomponents.version>

           <slf4j.version>1.7.10</slf4j.version>
           <logback.version>1.1.2</logback.version>

           <junit.version>4.12</junit.version>
           <mockito.version>1.10.19</mockito.version>
           <javax.servlet.version>3.1-b02</javax.servlet.version>
           <jetty.version>8.1.8.v20121106</jetty.version>
           <google-reflections.version>0.9.8</google-reflections.version>
           <spring.version>4.1.4.RELEASE</spring.version>
           <commons-io.version>2.4</commons-io.version>
           <commons-lang3.version>3.4</commons-lang3.version>
           <commons-collections.version>3.2.2</commons-collections.version>

           <sonar.jacoco.reportPath>${project.basedir}/target/jacoco.exec</sonar.jacoco.reportPath>-->
    </properties>
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/*version.properties</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*version.properties</include>
                </includes>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.codehaus.groovy.maven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>createPropertiesListFile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <properties>
                                <baseDir>${project.basedir}</baseDir>
                            </properties>
                            <source>
                                import java.io.IOException;
                                import java.io.InputStream;
                                import java.io.File;
                                import java.nio.charset.Charset;
                                import java.nio.file.Paths;
                                import java.nio.file.Path;
                                import java.nio.file.Files;

                                String baseDir = project.properties['baseDir'];
                                Path out = Paths.get(baseDir + '/src/main/resources/i18n/props.conf');
                                Files.deleteIfExists(out);

                                File file = new File(baseDir + '/src/main/resources/i18n');
                                StringBuilder sb = new StringBuilder();
                                if (file.exists()) {
                                    for (String str : file.list()) {
                                        if (str.matches(/.+[.]properties/)) {
                                            sb.append(str).append(" ");
                                        }
                                    }
                                    BufferedWriter bw =
                                            Files.newBufferedWriter(Files.createFile(out),
                                                    Charset.forName("UTF-8"));

                                    bw.write(sb.toString().trim());
                                    bw.flush();
                                    bw.close();
                                }
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- Jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.ext.rx</groupId>
            <artifactId>jersey-rx-client-java8</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
        </dependency>


        <dependency>
            <groupId>org.glassfish.jersey.test-framework.providers</groupId>
            <artifactId>jersey-test-framework-provider-jetty</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.test-framework</groupId>
            <artifactId>jersey-test-framework-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.0.0-M2</version>
            <scope>test</scope>
        </dependency>


        <!--<dependency>-->
        <!--<groupId>junit</groupId>-->
        <!--<artifactId>junit</artifactId>-->
        <!--<scope>test</scope>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.aggregate</groupId>
            <artifactId>jetty-server</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- Exclude Commons Logging in favor of SLF4j -->
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

</project>
